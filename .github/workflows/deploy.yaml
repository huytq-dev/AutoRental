name: Build and deploy Java Web app to Azure Web App - AutoRental

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - deploy # The 'deploy' branch. you can change branch as you need

env:
  AZURE_WEBAPP_NAME: AutoRental    # Set this to your application's name
  JAVA_VERSION: '24'               # Match your project.properties javac.source/target

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Verify project structure
      run: |
        echo "=== Project Structure ==="
        echo "Source directory:"
        ls -la src/java/ | head -5
        echo "JAR files:"
        ls -la src/jar/ | wc -l
        echo "Web directory:"
        ls -la web/
        echo "Build files:"
        ls -la build.xml
        ls -la nbproject/
    
    - name: Create simple build script
      run: |
        echo "=== Creating simple build script ==="
        cat > build-simple.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<project name="AutoRental-Simple" default="build" basedir=".">
    <property name="src.dir" value="src/java"/>
    <property name="web.dir" value="web"/>
    <property name="build.dir" value="build"/>
    <property name="build.web.dir" value="${build.dir}/web"/>
    <property name="build.classes.dir" value="${build.web.dir}/WEB-INF/classes"/>
    <property name="dist.dir" value="dist"/>
    <property name="war.name" value="AutoRental.war"/>
    <property name="dist.war" value="${dist.dir}/${war.name}"/>
    
    <path id="classpath">
        <fileset dir="src/jar" includes="*.jar"/>
    </path>
    
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    
    <target name="init" depends="clean">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>
    
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" 
               classpathref="classpath" debug="true" includeantruntime="false">
            <compilerarg value="-source"/>
            <compilerarg value="24"/>
            <compilerarg value="-target"/>
            <compilerarg value="24"/>
        </javac>
    </target>
    
    <target name="copy-web" depends="compile">
        <copy todir="${build.web.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.web.dir}/WEB-INF/lib">
            <fileset dir="src/jar" includes="*.jar"/>
        </copy>
    </target>
    
    <target name="build" depends="copy-web">
        <jar jarfile="${dist.war}" basedir="${build.web.dir}"/>
        <echo message="WAR file created: ${dist.war}"/>
    </target>
</project>
EOF
        echo "Simple build script created!"
    
    - name: Build with simple Ant script
      run: |
        echo "=== Building with simple Ant script ==="
        ant -f build-simple.xml build
        echo "=== Build completed ==="
    
    - name: Check build output
      run: |
        echo "=== Build Output ==="
        echo "Dist directory:"
        ls -la dist/ || echo "No dist directory found"
        echo "Build directory:"
        ls -la build/ || echo "No build directory found"
        echo "Looking for WAR files:"
        find . -name "*.war" -type f
        echo "WAR file details:"
        if [ -f dist/AutoRental.war ]; then
          echo "WAR file size:"
          ls -lh dist/AutoRental.war
          echo "WAR file contents:"
          unzip -l dist/AutoRental.war | head -20
          echo "Checking WEB-INF/lib contents:"
          unzip -l dist/AutoRental.war | grep "WEB-INF/lib" | head -10
        fi
    
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: java-app
        path: |
          dist/AutoRental.war
          dist/*.war
        if-no-files-found: error
    
  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: java-app
    
    - name: List downloaded files
      run: |
        echo "=== Downloaded Files ==="
        ls -la
        echo "=== File details ==="
        file *.war || echo "No WAR files found"
    
    - name: 'Deploy to Azure Web App'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: .
