name: Build and deploy Java Web app to Azure Web App - AutoRental

on:
  workflow_dispatch:
  push:
    branches:
      - deploy

env:
  AZURE_WEBAPP_NAME: AutoRental
  JAVA_VERSION: '17'  # Changed to Java 17 for better compatibility

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Install Apache Ant
      run: |
        sudo apt-get update
        sudo apt-get install -y ant
    
    - name: Verify JAR directory exists
      run: |
        echo "=== Checking src/jar directory ==="
        ls -la src/jar/ || echo "JAR directory not found"
    
    - name: Create build script with correct classpath
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?>' > build-simple.xml
        echo '<project name="AutoRental-Simple" default="build" basedir=".">' >> build-simple.xml
        echo '    <property name="src.dir" value="src/java"/>' >> build-simple.xml
        echo '    <property name="web.dir" value="web"/>' >> build-simple.xml
        echo '    <property name="build.dir" value="build"/>' >> build-simple.xml
        echo '    <property name="build.web.dir" value="${build.dir}/web"/>' >> build-simple.xml
        echo '    <property name="build.classes.dir" value="${build.web.dir}/WEB-INF/classes"/>' >> build-simple.xml
        echo '    <property name="dist.dir" value="dist"/>' >> build-simple.xml
        echo '    <property name="war.name" value="AutoRental.war"/>' >> build-simple.xml
        echo '    <property name="dist.war" value="${dist.dir}/${war.name}"/>' >> build-simple.xml
        echo '    <property name="jar.dir" value="src/jar"/>' >> build-simple.xml
        echo '    <path id="classpath">' >> build-simple.xml
        echo '        <fileset dir="${jar.dir}" includes="*.jar"/>' >> build-simple.xml
        echo '    </path>' >> build-simple.xml
        echo '    <target name="clean">' >> build-simple.xml
        echo '        <delete dir="${build.dir}"/>' >> build-simple.xml
        echo '        <delete dir="${dist.dir}"/>' >> build-simple.xml
        echo '    </target>' >> build-simple.xml
        echo '    <target name="init" depends="clean">' >> build-simple.xml
        echo '        <mkdir dir="${build.classes.dir}"/>' >> build-simple.xml
        echo '        <mkdir dir="${dist.dir}"/>' >> build-simple.xml
        echo '        <mkdir dir="${build.web.dir}/WEB-INF/lib"/>' >> build-simple.xml
        echo '    </target>' >> build-simple.xml
        echo '    <target name="compile" depends="init">' >> build-simple.xml
        echo '        <echo message="Classpath: ${toString:classpath}"/>' >> build-simple.xml
        echo '        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true" includeantruntime="false" encoding="UTF-8">' >> build-simple.xml
        echo '            <classpath refid="classpath"/>' >> build-simple.xml
        echo '            <compilerarg value="-source"/>' >> build-simple.xml
        echo '            <compilerarg value="17"/>' >> build-simple.xml
        echo '            <compilerarg value="-target"/>' >> build-simple.xml
        echo '            <compilerarg value="17"/>' >> build-simple.xml
        echo '            <compilerarg value="-Xlint:unchecked"/>' >> build-simple.xml
        echo '            <compilerarg value="-Xlint:deprecation"/>' >> build-simple.xml
        echo '        </javac>' >> build-simple.xml
        echo '    </target>' >> build-simple.xml
        echo '    <target name="copy-web" depends="compile">' >> build-simple.xml
        echo '        <copy todir="${build.web.dir}">' >> build-simple.xml
        echo '            <fileset dir="${web.dir}"/>' >> build-simple.xml
        echo '        </copy>' >> build-simple.xml
        echo '        <copy todir="${build.web.dir}/WEB-INF/lib">' >> build-simple.xml
        echo '            <fileset dir="${jar.dir}" includes="*.jar"/>' >> build-simple.xml
        echo '        </copy>' >> build-simple.xml
        echo '    </target>' >> build-simple.xml
        echo '    <target name="build" depends="copy-web">' >> build-simple.xml
        echo '        <jar jarfile="${dist.war}" basedir="${build.web.dir}"/>' >> build-simple.xml
        echo '        <echo message="WAR file created: ${dist.war}"/>' >> build-simple.xml
        echo '    </target>' >> build-simple.xml
        echo '</project>' >> build-simple.xml
    
    - name: Verify JAR files
      run: |
        echo "=== JAR Files Check ==="
        echo "Total JAR files:"
        ls -la src/jar/ | wc -l
        echo "JAR files list:"
        ls -la src/jar/
        echo "File sizes:"
        du -h src/jar/*
    
    - name: Build with Ant
      run: |
        echo "=== Building with Ant ==="
        ant -f build-simple.xml build
        echo "=== Build completed ==="
    
    - name: Check build output
      run: |
        echo "=== Build Output ==="
        echo "Dist directory:"
        ls -la dist/ || echo "No dist directory found"
        echo "Build directory:"
        ls -la build/ || echo "No build directory found"
        echo "Looking for WAR files:"
        find . -name "*.war" -type f
        echo "WAR file details:"
        if [ -f dist/AutoRental.war ]; then
          echo "WAR file size:"
          ls -lh dist/AutoRental.war
          echo "WAR file contents:"
          unzip -l dist/AutoRental.war | head -20
          echo "Checking WEB-INF/lib contents:"
          unzip -l dist/AutoRental.war | grep "WEB-INF/lib" | head -10
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: java-app
        path: dist/AutoRental.war
        if-no-files-found: error
    
  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: java-app
    
    - name: List downloaded files
      run: |
        echo "=== Downloaded Files ==="
        ls -la
        echo "=== File details ==="
        file *.war || echo "No WAR files found"
    
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: .
